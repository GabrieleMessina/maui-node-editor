
    double currentScale = 1;
    double startScale = 1;
    double xOffset = 0;
    double yOffset = 0;
    readonly double minScale = 0.8d;
    readonly double maxScale = 2d;
    private void PanContainer_PointerWheelChanged(object sender, EventArgs.PointerWheelChangedEventArgs e)
    {
        // Calculate the scale factor to be applied.
        var scale = Math.Clamp(e.MouseWheelDelta, 0.98d, 1.02d);
        currentScale += (scale - 1) * startScale;
        currentScale = Math.Clamp(currentScale, minScale, maxScale);

        // The ScaleOrigin is in relative coordinates to the wrapped user interface element,
        // so get the X pixel coordinate.
        var renderedX = Content.X + xOffset;
        var deltaX = renderedX / Width;
        var deltaWidth = Width / (Content.Width * startScale);
        var originX = (e.PointerPosition.X - deltaX) * deltaWidth;

        // The ScaleOrigin is in relative coordinates to the wrapped user interface element,
        // so get the Y pixel coordinate.
        var renderedY = Content.Y + yOffset;
        var deltaY = renderedY / Height;
        var deltaHeight = Height / (Content.Height * startScale);
        var originY = (e.PointerPosition.Y - deltaY) * deltaHeight;

        // Calculate the transformed element pixel coordinates.
        var targetX = xOffset - (originX * Content.Width) * (currentScale - 1);
        var targetY = yOffset - (originY * Content.Height) * (currentScale - 1);

        // Apply translation based on the change in origin.
        //Content.TranslationX = Math.Clamp(targetX, -Content.Width * (currentScale - 1), 0);
        //Content.TranslationY = Math.Clamp(targetY, -Content.Height * (currentScale - 1), 0);
        Content.TranslationX = Math.Max(targetX, -Content.Width * (currentScale - 1));
        Content.TranslationY = Math.Max(targetY, -Content.Height * (currentScale - 1));


        // Apply scale factor
        Content.Scale = currentScale;
    }


      private void OnContainerPinchUpdated(object sender, PinchGestureUpdatedEventArgs e)
    {
        if (e.Status == GestureStatus.Started)
        {
            // Store the current scale factor applied to the wrapped user interface element,
            // and zero the components for the center point of the translate transform.
            startScale = Content.Scale;
            Content.AnchorX = 0;
            Content.AnchorY = 0;
        }
        if (e.Status == GestureStatus.Running)
        {
            // Calculate the scale factor to be applied.
            //var scale = 1.5d;
            var scale = Math.Clamp(e.Scale, 0.9d, 1.1d);
            currentScale += (scale - 1) * startScale;

            // The ScaleOrigin is in relative coordinates to the wrapped user interface element,
            // so get the X pixel coordinate.
            var renderedX = Content.X + xOffset;
            var deltaX = renderedX / Width;
            var deltaWidth = Width / (Content.Width * startScale);
            var originX = (e.ScaleOrigin.X - deltaX) * deltaWidth;

            // The ScaleOrigin is in relative coordinates to the wrapped user interface element,
            // so get the Y pixel coordinate.
            var renderedY = Content.Y + yOffset;
            var deltaY = renderedY / Height;
            var deltaHeight = Height / (Content.Height * startScale);
            var originY = (e.ScaleOrigin.Y - deltaY) * deltaHeight;

            // Calculate the transformed element pixel coordinates.
            var targetX = xOffset - (originX * Content.Width) * (currentScale - startScale);
            var targetY = yOffset - (originY * Content.Height) * (currentScale - startScale);

            // Apply translation based on the change in origin.
            Content.TranslationX = Math.Clamp(targetX, -Content.Width * (currentScale - 1), 0);
            Content.TranslationY = Math.Clamp(targetY, -Content.Height * (currentScale - 1), 0);

            // Apply scale factor
            Content.Scale = Math.Clamp(currentScale, 0.2d, 3d);
        }
        if (e.Status == GestureStatus.Completed)
        {
            // Store the translation delta's of the wrapped user interface element.
            xOffset = Content.TranslationX;
            yOffset = Content.TranslationY;
        }
    }